// Generated by Dagger (https://dagger.dev).
package com.example.shopping.presentation.viewModels;

import com.example.shopping.domain.useCase.AddToFavUseCase;
import com.example.shopping.domain.useCase.AddtoCardUseCase;
import com.example.shopping.domain.useCase.CreateUserUseCase;
import com.example.shopping.domain.useCase.GetAllCategoriesUseCase;
import com.example.shopping.domain.useCase.GetAllFavUseCase;
import com.example.shopping.domain.useCase.GetAllProductUseCase;
import com.example.shopping.domain.useCase.GetAllSuggestedProductsUseCase;
import com.example.shopping.domain.useCase.GetBannerUseCase;
import com.example.shopping.domain.useCase.GetCartUseCase;
import com.example.shopping.domain.useCase.GetCheckOutUseCase;
import com.example.shopping.domain.useCase.GetSpecifiCategoryItems;
import com.example.shopping.domain.useCase.GetUserUseCase;
import com.example.shopping.domain.useCase.LoginUserUseCase;
import com.example.shopping.domain.useCase.UpDateUserDataUseCase;
import com.example.shopping.domain.useCase.getCategoryInLimit;
import com.example.shopping.domain.useCase.getProductByID;
import com.example.shopping.domain.useCase.getProductsInLimitUseCase;
import com.example.shopping.domain.useCase.userProfileImageUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ShoppingAppViewModel_Factory implements Factory<ShoppingAppViewModel> {
  private final Provider<CreateUserUseCase> createUserUseCaseProvider;

  private final Provider<LoginUserUseCase> loginUserUseCaseProvider;

  private final Provider<GetUserUseCase> getUserUseCaseProvider;

  private final Provider<UpDateUserDataUseCase> upDateUserDataUseCaseProvider;

  private final Provider<userProfileImageUseCase> userProfileImageUseCaseProvider;

  private final Provider<getCategoryInLimit> getCategoryInLimitProvider;

  private final Provider<getProductsInLimitUseCase> getProductsInLimitUseCaseProvider;

  private final Provider<AddtoCardUseCase> addtoCardUseCaseProvider;

  private final Provider<getProductByID> getProductByIDProvider;

  private final Provider<AddToFavUseCase> addtoFavUseCaseProvider;

  private final Provider<GetAllFavUseCase> getAllFavUseCaseProvider;

  private final Provider<GetAllProductUseCase> getAllProductsUseCaseProvider;

  private final Provider<GetCartUseCase> getCartUseCaseProvider;

  private final Provider<GetAllCategoriesUseCase> getAllCategoriesUseCaseProvider;

  private final Provider<GetCheckOutUseCase> getCheckOutUseCaseProvider;

  private final Provider<GetBannerUseCase> getBannerUseCaseProvider;

  private final Provider<GetSpecifiCategoryItems> getSpecifiCategoryItemsProvider;

  private final Provider<GetAllSuggestedProductsUseCase> getAllSuggestedProductsUseCaseProvider;

  public ShoppingAppViewModel_Factory(Provider<CreateUserUseCase> createUserUseCaseProvider,
      Provider<LoginUserUseCase> loginUserUseCaseProvider,
      Provider<GetUserUseCase> getUserUseCaseProvider,
      Provider<UpDateUserDataUseCase> upDateUserDataUseCaseProvider,
      Provider<userProfileImageUseCase> userProfileImageUseCaseProvider,
      Provider<getCategoryInLimit> getCategoryInLimitProvider,
      Provider<getProductsInLimitUseCase> getProductsInLimitUseCaseProvider,
      Provider<AddtoCardUseCase> addtoCardUseCaseProvider,
      Provider<getProductByID> getProductByIDProvider,
      Provider<AddToFavUseCase> addtoFavUseCaseProvider,
      Provider<GetAllFavUseCase> getAllFavUseCaseProvider,
      Provider<GetAllProductUseCase> getAllProductsUseCaseProvider,
      Provider<GetCartUseCase> getCartUseCaseProvider,
      Provider<GetAllCategoriesUseCase> getAllCategoriesUseCaseProvider,
      Provider<GetCheckOutUseCase> getCheckOutUseCaseProvider,
      Provider<GetBannerUseCase> getBannerUseCaseProvider,
      Provider<GetSpecifiCategoryItems> getSpecifiCategoryItemsProvider,
      Provider<GetAllSuggestedProductsUseCase> getAllSuggestedProductsUseCaseProvider) {
    this.createUserUseCaseProvider = createUserUseCaseProvider;
    this.loginUserUseCaseProvider = loginUserUseCaseProvider;
    this.getUserUseCaseProvider = getUserUseCaseProvider;
    this.upDateUserDataUseCaseProvider = upDateUserDataUseCaseProvider;
    this.userProfileImageUseCaseProvider = userProfileImageUseCaseProvider;
    this.getCategoryInLimitProvider = getCategoryInLimitProvider;
    this.getProductsInLimitUseCaseProvider = getProductsInLimitUseCaseProvider;
    this.addtoCardUseCaseProvider = addtoCardUseCaseProvider;
    this.getProductByIDProvider = getProductByIDProvider;
    this.addtoFavUseCaseProvider = addtoFavUseCaseProvider;
    this.getAllFavUseCaseProvider = getAllFavUseCaseProvider;
    this.getAllProductsUseCaseProvider = getAllProductsUseCaseProvider;
    this.getCartUseCaseProvider = getCartUseCaseProvider;
    this.getAllCategoriesUseCaseProvider = getAllCategoriesUseCaseProvider;
    this.getCheckOutUseCaseProvider = getCheckOutUseCaseProvider;
    this.getBannerUseCaseProvider = getBannerUseCaseProvider;
    this.getSpecifiCategoryItemsProvider = getSpecifiCategoryItemsProvider;
    this.getAllSuggestedProductsUseCaseProvider = getAllSuggestedProductsUseCaseProvider;
  }

  @Override
  public ShoppingAppViewModel get() {
    return newInstance(createUserUseCaseProvider.get(), loginUserUseCaseProvider.get(), getUserUseCaseProvider.get(), upDateUserDataUseCaseProvider.get(), userProfileImageUseCaseProvider.get(), getCategoryInLimitProvider.get(), getProductsInLimitUseCaseProvider.get(), addtoCardUseCaseProvider.get(), getProductByIDProvider.get(), addtoFavUseCaseProvider.get(), getAllFavUseCaseProvider.get(), getAllProductsUseCaseProvider.get(), getCartUseCaseProvider.get(), getAllCategoriesUseCaseProvider.get(), getCheckOutUseCaseProvider.get(), getBannerUseCaseProvider.get(), getSpecifiCategoryItemsProvider.get(), getAllSuggestedProductsUseCaseProvider.get());
  }

  public static ShoppingAppViewModel_Factory create(
      Provider<CreateUserUseCase> createUserUseCaseProvider,
      Provider<LoginUserUseCase> loginUserUseCaseProvider,
      Provider<GetUserUseCase> getUserUseCaseProvider,
      Provider<UpDateUserDataUseCase> upDateUserDataUseCaseProvider,
      Provider<userProfileImageUseCase> userProfileImageUseCaseProvider,
      Provider<getCategoryInLimit> getCategoryInLimitProvider,
      Provider<getProductsInLimitUseCase> getProductsInLimitUseCaseProvider,
      Provider<AddtoCardUseCase> addtoCardUseCaseProvider,
      Provider<getProductByID> getProductByIDProvider,
      Provider<AddToFavUseCase> addtoFavUseCaseProvider,
      Provider<GetAllFavUseCase> getAllFavUseCaseProvider,
      Provider<GetAllProductUseCase> getAllProductsUseCaseProvider,
      Provider<GetCartUseCase> getCartUseCaseProvider,
      Provider<GetAllCategoriesUseCase> getAllCategoriesUseCaseProvider,
      Provider<GetCheckOutUseCase> getCheckOutUseCaseProvider,
      Provider<GetBannerUseCase> getBannerUseCaseProvider,
      Provider<GetSpecifiCategoryItems> getSpecifiCategoryItemsProvider,
      Provider<GetAllSuggestedProductsUseCase> getAllSuggestedProductsUseCaseProvider) {
    return new ShoppingAppViewModel_Factory(createUserUseCaseProvider, loginUserUseCaseProvider, getUserUseCaseProvider, upDateUserDataUseCaseProvider, userProfileImageUseCaseProvider, getCategoryInLimitProvider, getProductsInLimitUseCaseProvider, addtoCardUseCaseProvider, getProductByIDProvider, addtoFavUseCaseProvider, getAllFavUseCaseProvider, getAllProductsUseCaseProvider, getCartUseCaseProvider, getAllCategoriesUseCaseProvider, getCheckOutUseCaseProvider, getBannerUseCaseProvider, getSpecifiCategoryItemsProvider, getAllSuggestedProductsUseCaseProvider);
  }

  public static ShoppingAppViewModel newInstance(CreateUserUseCase createUserUseCase,
      LoginUserUseCase loginUserUseCase, GetUserUseCase getUserUseCase,
      UpDateUserDataUseCase upDateUserDataUseCase, userProfileImageUseCase userProfileImageUseCase,
      getCategoryInLimit getCategoryInLimit, getProductsInLimitUseCase getProductsInLimitUseCase,
      AddtoCardUseCase addtoCardUseCase, getProductByID getProductByID,
      AddToFavUseCase addtoFavUseCase, GetAllFavUseCase getAllFavUseCase,
      GetAllProductUseCase getAllProductsUseCase, GetCartUseCase getCartUseCase,
      GetAllCategoriesUseCase getAllCategoriesUseCase, GetCheckOutUseCase getCheckOutUseCase,
      GetBannerUseCase getBannerUseCase, GetSpecifiCategoryItems getSpecifiCategoryItems,
      GetAllSuggestedProductsUseCase getAllSuggestedProductsUseCase) {
    return new ShoppingAppViewModel(createUserUseCase, loginUserUseCase, getUserUseCase, upDateUserDataUseCase, userProfileImageUseCase, getCategoryInLimit, getProductsInLimitUseCase, addtoCardUseCase, getProductByID, addtoFavUseCase, getAllFavUseCase, getAllProductsUseCase, getCartUseCase, getAllCategoriesUseCase, getCheckOutUseCase, getBannerUseCase, getSpecifiCategoryItems, getAllSuggestedProductsUseCase);
  }
}
