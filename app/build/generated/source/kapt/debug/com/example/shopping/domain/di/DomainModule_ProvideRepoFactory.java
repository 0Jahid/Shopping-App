// Generated by Dagger (https://dagger.dev).
package com.example.shopping.domain.di;

import com.example.shopping.domain.repo.Repo;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DomainModule_ProvideRepoFactory implements Factory<Repo> {
  private final DomainModule module;

  private final Provider<FirebaseAuth> firebaseAuthProvider;

  private final Provider<FirebaseFirestore> firebaseFirestoreProvider;

  public DomainModule_ProvideRepoFactory(DomainModule module,
      Provider<FirebaseAuth> firebaseAuthProvider,
      Provider<FirebaseFirestore> firebaseFirestoreProvider) {
    this.module = module;
    this.firebaseAuthProvider = firebaseAuthProvider;
    this.firebaseFirestoreProvider = firebaseFirestoreProvider;
  }

  @Override
  public Repo get() {
    return provideRepo(module, firebaseAuthProvider.get(), firebaseFirestoreProvider.get());
  }

  public static DomainModule_ProvideRepoFactory create(DomainModule module,
      Provider<FirebaseAuth> firebaseAuthProvider,
      Provider<FirebaseFirestore> firebaseFirestoreProvider) {
    return new DomainModule_ProvideRepoFactory(module, firebaseAuthProvider, firebaseFirestoreProvider);
  }

  public static Repo provideRepo(DomainModule instance, FirebaseAuth firebaseAuth,
      FirebaseFirestore firebaseFirestore) {
    return Preconditions.checkNotNullFromProvides(instance.provideRepo(firebaseAuth, firebaseFirestore));
  }
}
